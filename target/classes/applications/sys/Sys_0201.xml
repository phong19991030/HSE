<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 사용자관리 -->
<mapper namespace="sys.sys0201">	
	
	<select id="getUserList" parameterType="map" resultType="HashMap">
		SELECT 

				A1.USER_UID, A1.USER_ID, A2.USER_NM, A1.PWD, A2.EMAIL, A2.USER_ENG_NM,
				
				A1.USE_FRM_DT, A1.USE_TO_DT, A1.INS_ID, DATE_TO_STRING(A1.INS_DT, #{LANG_CODE}, 'T%T') INS_DT, A1.UPT_ID,A1.COMP,A1.USER_YN, 
				A1.UPT_DT, DATE_TO_STRING(A3.LOGIN_DT, #{LANG_CODE}, 'T%T') AS LOGIN_DT, A1.LOGO, 
				
				A4.COMPANY_NM
				
				FROM TSST_USER A1 
				LEFT JOIN TSST_USER_INFO A2 ON A1.USER_ID = A2.USER_ID
				LEFT JOIN TSST_USER_LOGIN_RECENT A3 ON A1.USER_ID = A3.USER_ID
				LEFT JOIN WT_COMPANY A4 ON A1.COMP = A4.COMPANY_ID
				
		<where>
			A1.USER_YN = "Y"
			<if test="SE_USER_NM != null and SE_USER_NM != ''">
				<trim prefix="AND">
					 A2.USER_NM LIKE concat('%',#{SE_USER_NM},'%')
				</trim>
			</if>
			
			 <if test="SE_COMP != null and SE_COMP != ''">
				 <trim prefix="AND">
				 	 <!-- A1.COMP LIKE concat('%',#{SE_COMP},'%') -->
				 	  A1.COMP = #{SE_COMP}
				 </trim>
			</if> 
				<if test="USER_ID != null and USER_ID != ''">
				<trim prefix="AND">
					 A1.USER_ID LIKE concat('%',#{USER_ID},'%')
				</trim>
			</if>
			<if test="USERNAME != null and USERNAME != ''">
				<trim prefix="AND">
					 A2.USER_NM LIKE concat('%',#{USERNAME},'%')
				</trim>
			</if>
			<if test="COMPANY_ID != null and COMPANY_ID != ''">
				 <trim prefix="AND">
				 	 <!-- A1.COMP LIKE concat('%',#{SE_COMP},'%') -->
				 	  A1.COMP  = #{COMPANY_ID}
				 </trim>
			</if>
			 <if test="COMPANY_NM != null and COMPANY_NM != ''">
				 <trim prefix="AND">
				 	 <!-- A1.COMP LIKE concat('%',#{SE_COMP},'%') -->
				 	  A4.COMPANY_NM  LIKE concat('%', #{COMPANY_NM},'%')
				 </trim>
			</if>
			<if test="all != null and all != ''">
				 <trim prefix="AND">
					(A1.USER_ID LIKE concat('%',#{all},'%')
					OR A2.USER_NM LIKE concat('%',#{all},'%')
					OR  A1.COMP  LIKE concat('%', #{all},'%') )
				 </trim>
			</if> 
		</where>
		ORDER BY A1.INS_DT DESC, A1.USER_ID
	</select>
	
	<select id="getRoleList" parameterType="map" resultType="HashMap">
		SELECT ROLE_ID
		FROM TSST_USER_ROLE
		WHERE USER_ID = #{USER_UID}
	</select>
	
	<select id="getGeratorList" parameterType="map" resultType="HashMap">
		SELECT GERATOR_ID
		FROM WT_AUTHORITY
		WHERE USER_UID = #{USER_UID}
	</select>
	
	<select id="getRoleListName" parameterType="map" resultType="HashMap">
		SELECT ROLE_NM
		FROM TSST_ROLE_MGT
		WHERE ROLE_ID = #{ROLE_ID}
	</select>
	
	<select id="getGeratorListName" parameterType="map" resultType="HashMap">
		SELECT GERATOR_NM
		FROM WT_GERATOR
		WHERE GERATOR_ID = #{GERATOR_ID}
	</select>
	
	<select id="getLogoPath" parameterType="map" resultType="HashMap">
		SELECT 
			FLE_PATH
		FROM TCCO_FILE 
		<where>
		
			ATCH_FLE_SEQ = #{LOGO}
			
		</where>
	</select>
	
	<select id="getCompanyName" parameterType="map" resultType="HashMap">
		SELECT 
			A2.COMPANY_NM 
		FROM TSST_USER A1  
		INNER JOIN WT_COMPANY A2 ON A1.COMP = A2.COMPANY_ID
		<where>
		
			A1.USER_UID = #{USER_UID}
			
		</where>
	</select>
	
	<select id="getUser" parameterType="map" resultType="HashMap">
		SELECT 
					USER_UID, USER_ID, USER_NM, PWD, 
			   EMAIL, 
			   USE_FRM_DT, USE_TO_DT, INS_ID, 
			   INS_DT, UPT_ID, UPT_DT
			   
		FROM
			(SELECT A1.USER_UID, A1.USER_ID, A2.USER_NM, A1.PWD, A2.EMAIL,
				A1.USE_FRM_DT, A1.USE_TO_DT, A1.INS_ID, A1.INS_DT, A1.UPT_ID,
				A1.UPT_DT
				FROM TSST_USER A1
				LEFT JOIN TSST_USER_INFO A2
				ON A1.USER_UID = A2.USER_ID) A
    WHERE A.USER_UID = #{USER_UID}

	</select>
	
	<!-- 
		ID	: chkUserId
		설명	: 사용자ID 중복체크
	-->
	<select id="chkUserId" parameterType="map" resultType="string">
		SELECT	TRIM (CONVERT(COUNT(*),CHAR)) AS CNT
		  FROM	TSST_USER
		 WHERE	USER_ID	=	#{USER_ID}
	</select>

	<insert id="insertUser" parameterType="map">
			<selectKey keyProperty="USER_UID" resultType="string" order="AFTER">
				SELECT @result
			</selectKey>
			
			BEGIN NOT ATOMIC
			DECLARE result VARCHAR(20);
			CALL proc_gen_id('USER_SEQ', @result); 
		
	
			INSERT	INTO	TSST_USER(
					USER_UID,
					USER_ID,
					PWD,
					COMP,
					LOGO,
	<!-- 					DEPT_CD, -->
				
					<!-- USE_FRM_DT,					
					USE_TO_DT, -->
					INS_ID,
					INS_DT
			)VALUES(
					@result,
					#{USER_ID, 			jdbcType=VARCHAR},
					#{PWD,				jdbcType=VARCHAR},
					#{COMP,				jdbcType=VARCHAR},
					#{LOGO,				jdbcType=VARCHAR},
					#{SESS_USER_ID, 	jdbcType=VARCHAR},
					SYSDATE()
			);
			
			END;
			
	</insert>	
	
	<insert id="insertUserRole" parameterType="map">
		INSERT INTO TSST_USER_ROLE (
			ROLE_ID,
			USER_ID
		)
		VALUES (
			#{ROLE_ID},
			#{USER_UID}
		)
	</insert>
	
	<insert id="insertAuthority" parameterType="map">
		INSERT INTO WT_AUTHORITY (
			GERATOR_ID,
			USER_UID
		)
		VALUES (
			#{GERATOR_ID},
			#{USER_UID}
		)
	</insert>
	
	
	<delete id="deleteUser" parameterType="map">
	BEGIN NOT ATOMIC
		DELETE FROM WT_AUTHORITY WHERE USER_UID = #{USER_UID}; 
		DELETE	FROM	TSST_USER_ROLE
		 WHERE	USER_ID	=	#{USER_UID};
		DELETE	FROM	TSST_USER_INFO
		 WHERE	USER_ID	=	#{USER_ID};
		DELETE FROM TSST_USER 
		 WHERE	USER_UID	=	#{USER_UID};
	END;
	
	</delete>
	<delete id="deleteUserRole" parameterType="map">
	BEGIN NOT ATOMIC
		DELETE FROM WT_AUTHORITY WHERE USER_UID = #{USER_UID}; 
		DELETE	FROM	TSST_USER_ROLE
		 WHERE	USER_ID	=	#{USER_UID};
	END;
	</delete>
	
	<delete id="deleteAuthority" parameterType="map">
		DELETE	FROM	WT_AUTHORITY
		 WHERE	USER_UID	=	#{USER_UID}
	</delete>
	
	<delete id="deleteLogo" parameterType="map">
			
			DELETE	FROM	TCCO_FILE
			 WHERE	ATCH_FLE_SEQ	=	#{ATCH_FLE_SEQ}
	
	</delete>
	
	<!--
		ID	: updateUser
		설명	: 저장
	-->
	<select id="updateUser" parameterType="map">
			UPDATE TSST_USER SET	
					USER_ID			=	#{USER_ID, 			jdbcType=VARCHAR},
						<!-- <if test="PWD != null and PWD != ''"> -->
					PWD				=	#{PWD,				jdbcType=VARCHAR},
					<!-- </if>	 -->
					UPT_ID			=	#{SESS_USER_ID, 	jdbcType=VARCHAR},
					COMP			=	#{COMP, 	jdbcType=VARCHAR},
					<if test="!empty(LOGO)">LOGO			=	#{LOGO, 	jdbcType=VARCHAR},</if>
<!-- 					DEPT_CD			= 	#{DEPT_CD,			jdbcType=VARCHAR}, -->
					UPT_DT			=	SYSDATE()
					
					<!-- USE_FRM_DT		=	TO_DATE(#{USE_FRM_DT, 		jdbcType=VARCHAR},'yyyy/mm/dd'),
					USE_TO_DT		=	TO_DATE(#{USE_TO_DT, 		jdbcType=VARCHAR},'yyyy/mm/dd') -->
			 WHERE	USER_UID		=	#{USER_UID, 		jdbcType=VARCHAR}
	</select>	
	
	<select id="updateUser2" parameterType="map">
			UPDATE TSST_USER SET	
					USER_ID			=	#{USER_ID, 			jdbcType=VARCHAR},
						<if test="PWD != null and PWD != ''">
					PWD				=	#{PWD,				jdbcType=VARCHAR},
					</if>	
					UPT_ID			=	#{SESS_USER_ID, 	jdbcType=VARCHAR},
<!-- 					DEPT_CD			= 	#{DEPT_CD,			jdbcType=VARCHAR}, -->
					UPT_DT			=	sysdate,
					EMP_NO			=	#{EMP_NO, 	jdbcType=VARCHAR},
					USE_FRM_DT		=	TO_DATE(#{USE_FRM_DT, 		jdbcType=VARCHAR},'yyyy-mm-dd'),
					USE_TO_DT		=	TO_DATE(#{USE_TO_DT, 		jdbcType=VARCHAR},'yyyy-mm-dd'),
					PASS_INIT = 'Y'
			 WHERE	USER_UID		=	#{USER_UID, 		jdbcType=VARCHAR}
	</select>	
	
	<select id="insertUserInfo" parameterType="map">
		
		
		INSERT INTO TSST_USER_INFO (
			USER_ID,
			 USER_NM,
			<!--USER_ENG_NM, -->
			EMAIL,
			UPT_ID,
			UPT_DT,
			INS_ID,
			INS_DT
		) VALUES (
			#{USER_ID,			jdbcType=VARCHAR},
			#{USER_NM,			jdbcType=VARCHAR},
		<!--		#{USER_ENG_NM,		jdbcType=VARCHAR},-->
			#{EMAIL, 			jdbcType=VARCHAR}, 
			#{SESS_USER_ID, 	jdbcType=VARCHAR},
			SYSDATE(),
			#{SESS_USER_ID, jdbcType=VARCHAR},
			SYSDATE()
		)
	</select>	
	
	<!--
		ID	: updateUserInfo
		설명	: 저장
	-->
	<select id="updateUserInfo" parameterType="map">
		BEGIN NOT ATOMIC
		DELETE FROM TSST_USER_INFO WHERE USER_ID = #{USER_ID};
		INSERT INTO TSST_USER_INFO (
			USER_ID,
			 USER_NM,
			<!--USER_ENG_NM, -->
			EMAIL,
			UPT_ID,
			UPT_DT,
			INS_ID,
			INS_DT
		) VALUES (
			#{USER_ID,			jdbcType=VARCHAR},
			#{USER_NM,			jdbcType=VARCHAR},
		<!--		#{USER_ENG_NM,		jdbcType=VARCHAR},-->
			#{EMAIL, 			jdbcType=VARCHAR}, 
			#{SESS_USER_ID, 	jdbcType=VARCHAR},
			SYSDATE(),
			#{SESS_USER_ID, jdbcType=VARCHAR},
			SYSDATE()
		);
<!-- 		UPDATE TSST_USER_INFO SET	
			USER_NM			=	#{USER_NM,			jdbcType=VARCHAR},
			USER_ENG_NM		=	#{USER_ENG_NM, 		jdbcType=VARCHAR},
			EMAIL			=	#{EMAIL,			jdbcType=VARCHAR},
			UPT_ID			=	#{SESS_USER_ID, 	jdbcType=VARCHAR},
			UPT_DT			=	SYSDATE()
		WHERE	USER_ID		=	#{USER_ID, 		jdbcType=VARCHAR}
 -->	
 	END;
 	</select>

<!-- 	<delete id="deleteUser" parameterType="map"> -->
<!-- 		DELETE FROM TSST_USER -->
<!-- 		WHERE USER_UID = #{USER_UID} -->
<!-- 	</delete> -->
	
	
	<!--
		ID	: deleteUserInfo
		설명	: 삭제
	-->
	<delete id="deleteUserInfo" parameterType="map">
		
		DELETE	FROM	TSST_USER_INFO
		 WHERE	USER_ID	=	#{USER_ID}
	</delete>
	
	<select id="getUserListMdl" parameterType="applications.stm.Stm_0201Model" resultType="applications.stm.Stm_0201Model">
		SELECT 
			   USER_UID, USER_ID, USER_NM, PWD, 
<!-- 			   DEPT_CD,  -->
			   EMAIL, MSGR_USE_YN, 
<!-- 			   GW_USE_YN, -->
<!-- 			    WMAIL_USE_YN, GW_ID,  -->
			   USE_FRM_DT, USE_TO_DT, INS_ID, 
			   INS_DT, UPT_ID, UPT_DT, 
			   EMP_NO
		FROM TSST_USER
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="not empty(SE_USER_ID)">
				USER_ID = #{SE_USER_ID}
			</if>
<!-- 			<if test="not empty(SE_DEPT_CD)"> -->
<!-- 				AND DEPT_CD = #{SE_DEPT_CD} -->
<!-- 			</if> -->
		</trim>
	</select>
	
	<select id="getUserMdl" parameterType="applications.stm.Stm_0201Model" resultType="applications.stm.Stm_0201Model">
		SELECT 
				USER_UID, USER_ID, USER_NM, PWD, 
<!-- 				DEPT_CD, -->
				 EMAIL, MSGR_USE_YN, 
<!-- 				GW_USE_YN, WMAIL_USE_YN, GW_ID,  -->
				USE_FRM_DT, USE_TO_DT, INS_ID, 
				INS_DT, UPT_ID, UPT_DT, 
				EMP_NO
		FROM TSST_USER A
		WHERE A.USER_ID = #{USER_ID}	
	</select>
	
	<select id="chkUserIdMdl" parameterType="applications.sys.Sys_0201Model" resultType="string">
		SELECT	TRIM (CONVERT(COUNT(*),CHAR)) AS CNT
		  FROM	TSST_USER
		 WHERE	USER_ID	=	#{USER_ID}
	</select>
	
	<select id="saveMdl" parameterType="applications.sys.Sys_0201Model">
		DECLARE
			V_CNT	NUMBER;
		BEGIN
			SELECT	COUNT (*)
			  INTO	V_CNT
			  FROM	TSST_USER
			 WHERE	USER_ID	=	#{USER_ID};

			IF V_CNT = 0 THEN
				INSERT	INTO	TSST_USER(
						USER_ID,
						USER_NM,
<!-- 						GW_ID, -->
						PWD,
						EMP_NO,
<!-- 						DEPT_CD, -->
						EMAIL,
<!-- 						GW_USE_YN, -->
						USE_FRM_DT,
						USE_TO_DT,
						INS_ID,
						INS_DT
				)VALUES(
						#{USER_ID, 			jdbcType=VARCHAR},
						#{USER_NM, 			jdbcType=VARCHAR},
<!-- 						#{GW_ID, 			jdbcType=VARCHAR}, -->
						#{PWD,				jdbcType=VARCHAR},
<!-- 						PKG_SECR.SET_SECR_ONEWAY(#{PWD, jdbcType=VARCHAR}), -->
						#{EMP_NO, 			jdbcType=VARCHAR},
<!-- 						#{DEPT_CD, 			jdbcType=VARCHAR}, -->
						#{EMAIL, 			jdbcType=VARCHAR},
<!-- 						#{GW_USE_YN, 		jdbcType=VARCHAR}, -->
						TO_DATE(#{USE_FRM_DT, 		jdbcType=VARCHAR},'yyyy/mm/dd'),
						TO_DATE(#{USE_TO_DT, 		jdbcType=VARCHAR},'yyyy/mm/dd'),
						#{SESS_USER_ID, 	jdbcType=VARCHAR},
						sysdate
				);
			ELSE
				UPDATE TSST_USER SET	
<!-- 						GW_ID			=	#{GW_ID, 			jdbcType=VARCHAR}, -->
						PWD				=	#{PWD,				jdbcType=VARCHAR},
<!-- 						PWD				=	PKG_SECR.SET_SECR_ONEWAY(#{PWD, jdbcType=VARCHAR}), -->
						EMAIL			=	#{EMAIL, 			jdbcType=VARCHAR},
<!-- 						DEPT_CD			=	#{DEPT_CD, 			jdbcType=VARCHAR}, -->
<!-- 						GW_USE_YN		=	#{GW_USE_YN, 		jdbcType=VARCHAR}, -->
						UPT_ID			=	#{SESS_USER_ID, 	jdbcType=VARCHAR},
						UPT_DT			=	sysdate,
						USE_FRM_DT		=	TO_DATE(#{USE_FRM_DT, 	jdbcType=VARCHAR},'yyyyddmm'},
						USE_TO_DT		=	TO_DATE(#{USE_TO_DT, 	jdbcType=VARCHAR},'yyyyddmm'}
				 WHERE	USER_ID		=	#{USER_ID, 		jdbcType=VARCHAR};
			END IF;
		END;		
	</select>	
	
	<delete id="deleteMdl" parameterType="applications.stm.Stm_0201Model">
		DELETE	FROM	TSST_USER
		 WHERE	USER_ID	=	#{USER_ID}
	</delete>
	
	<update id="initPassword" parameterType="map">
		UPDATE TSST_USER
		   SET PWD 				=  #{PWD},
		       IS_FIRST_LOGIN 	=  1
		 WHERE USER_UID  = #{USER_UID}	
	</update>
	
	<update id="initLoginState" parameterType="map">
		UPDATE TSST_USER_LOGIN_INFO
		   SET LOGIN_FAIL_CNT    =  0,
		       USER_LOCKED       =  'N'
		 WHERE USER_ID  = (
		 				   SELECT USER_ID
		  					 FROM TSST_USER
		  					WHERE USER_UID = #{USER_UID}
		  				   )	
	</update>
	
	<select id="getUserManagementAttach" parameterType="java.lang.String" resultType="hashmap">
		SELECT T2.* FROM TSST_USER T1 
		LEFT JOIN TCCO_FILE T2 ON T2.ATCH_FLE_SEQ = T1.LOGO 
		WHERE T1.USER_UID = #{USER_UID}
	</select>
	
	
	<select id="getGroupByGenId" parameterType="map" resultType="hashmap">
		SELECT 
			GROUP_ID
		FROM  WT_GERATOR
		WHERE GERATOR_ID IN 
			<foreach item="item" index="index" collection="lstGenId"
            	open="(" separator="," close=")">
	        	#{item}
	    	</foreach>
	    GROUP BY GROUP_ID
	</select>
	
	<select id="getFarmByGroupId" parameterType="map" resultType="hashmap">
		SELECT 
			FARM_ID
		FROM  WT_GROUP
		WHERE GROUP_ID IN 
			<foreach item="item" index="index" collection="lstGroupId"
            	open="(" separator="," close=")">
	        	#{item.GROUP_ID}
	    	</foreach>
	    GROUP BY FARM_ID
	</select>
	
	
	<!-- @hy 사용자관리 상세정보 조회 -->
	<select id="getUserInfo" parameterType="map" resultType="hashmap">
	
	</select>	
</mapper>