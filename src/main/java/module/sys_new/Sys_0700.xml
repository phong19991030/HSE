<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sys_new.sys0700">
	
	<!-- 공지사항 리스트 -->
	<select id="getNoticeList" parameterType="map" resultType="HashMap">
		SELECT SUB.*
		FROM (
			SELECT N.NOTICE_ID
				 , ROW_NUMBER() OVER (ORDER BY N.INS_DT DESC) AS RN
				 , N.NOTICE_TIT AS TITLE
			     , TU.USER_NM AS REGISTER
			     , TU.USER_UID 
			     , DATE_FORMAT(CONVERT_TZ(N.INS_DT, @@session.time_zone,  #{session.CLIENT_TIMEZONE_OFFSET}), '%Y-%m-%dT%T') AS INS_DATETIME
			     , N.INS_ID
			     , N.NOTICE_SETTING
			     , N.PERIOD_YN
			     , (CASE 
			           WHEN N.NOTICE_SETTING = 'Y' THEN 1
			           WHEN N.NOTICE_SETTING = '' THEN 0
			           ELSE 0
			      END) AS STATUS
			     , (CASE 
			           WHEN N.ATCH_FILE != '' THEN 1
			           ELSE 0
			      END) AS ATCH_FILE
			     , IFNULL(TF.FLE_PATH, '') AS FLE_PATH
			     , IFNULL(TF.FLE_NM, '') AS FLE_NM
			     , IFNULL(TF.NEW_FLE_NM, '') AS NEW_FLE_NM
			     , IFNULL(TF.FLE_KEY, '') AS FLE_KEY
			     , IFNULL(TF.FLE_TP, '') AS FLE_TP
			  FROM WT_NOTICE N
			  LEFT JOIN TCCO_FILE TF 
			         ON TF.ATCH_FLE_SEQ = N.ATCH_FILE COLLATE utf8mb4_general_ci
			  LEFT JOIN 
			          ( SELECT TU.USER_UID, TUI.USER_NM
			              FROM TSST_USER TU
			         LEFT JOIN TSST_USER_INFO TUI
			                ON TU.USER_ID = TUI.USER_ID
			          )TU
			        ON TU.USER_UID = N.INS_ID
			   <where>
			   		<if test="SEARCH_ALL != null and SEARCH_ALL != '' ">
			   			AND (
						    N.NOTICE_TIT LIKE CONCAT('%',#{SEARCH_ALL},'%')
						    OR TU.USER_NM LIKE CONCAT('%',#{SEARCH_ALL},'%')
						)
			   		</if>
			   		<if test="SEARCH_TITLE != null and SEARCH_TITLE != '' ">
			   			AND N.NOTICE_TIT LIKE CONCAT('%',#{SEARCH_TITLE},'%')
			   		</if>
			   		<if test="SEARCH_USER_ID != null and SEARCH_USER_ID != '' ">
			   			AND TU.USER_UID LIKE CONCAT('%',#{SEARCH_USER_ID},'%')
			   		</if>
			   </where>
		) SUB
		WHERE SUB.RN BETWEEN (#{PAGE}-1) * #{PAGE_SIZE}+1 and (#{PAGE} * #{PAGE_SIZE})
		ORDER BY SUB.RN ASC
	</select>
	
	<select id="getNoticeCnt" parameterType="map" resultType="HashMap">
		SELECT COUNT(*) AS CNT
		  FROM WT_NOTICE N
		  LEFT JOIN TCCO_FILE TF 
		         ON TF.ATCH_FLE_SEQ = N.ATCH_FILE COLLATE utf8mb4_general_ci
		  LEFT JOIN 
		          ( SELECT TU.USER_UID, TUI.USER_NM
		              FROM TSST_USER TU
		         LEFT JOIN TSST_USER_INFO TUI
		                ON TU.USER_ID = TUI.USER_ID
		          )TU
		        ON TU.USER_UID = N.INS_ID
		   <where>
		   		<if test="SEARCH_ALL != null and SEARCH_ALL != '' ">
		   			AND (
					    N.NOTICE_TIT LIKE CONCAT('%',#{SEARCH_ALL},'%')
					    OR TU.USER_NM LIKE CONCAT('%',#{SEARCH_ALL},'%')
					)
		   		</if>
		   		<if test="SEARCH_TITLE != null and SEARCH_TITLE != '' ">
		   			AND N.NOTICE_TIT LIKE CONCAT('%',#{SEARCH_TITLE},'%')
		   		</if>
		   		<if test="SEARCH_USER_ID != null and SEARCH_USER_ID != '' ">
		   			AND TU.USER_UID LIKE CONCAT('%',#{SEARCH_USER_ID},'%')
		   		</if>
		   </where>
	</select>
	
	<select id="getRegisterList" parameterType="map" resultType="HashMap">
		  SELECT TU.USER_UID, TUI.USER_NM
		    FROM TSST_USER TU
		    LEFT JOIN TSST_USER_INFO TUI
		           ON TU.USER_ID = TUI.USER_ID
	</select>
	
	<!-- 등록  -->
	<insert id="insertNotice" parameterType="map">
		BEGIN NOT ATOMIC
	
		<selectKey keyProperty="NOTICE_ID" resultType="Integer" order="AFTER">
		    SELECT LAST_INSERT_ID();
		</selectKey>
	
		<if test="ATCH_FILE != null">
			<!-- TCCO_FILE -->
			INSERT INTO TCCO_FILE
			(
			    FLE_KEY,
			    ATCH_FLE_SEQ,
			    FLE_TP,
			    FLE_PATH,
			    FLE_NM,
			    NEW_FLE_NM,
			    FLE_SZ,
			    INS_ID,
			    INS_DT
			)
			VALUES
			(
			    'notice_atch_file',
			    #{ATCH_FILE.ATCH_FLE_SEQ},
			    #{ATCH_FILE.EXTENSION},
			    #{ATCH_FILE.LAST_PATH},
			    #{ATCH_FILE.ORIGINAL_NAME},
			    #{ATCH_FILE.UNIQUE_NAME},
			    #{ATCH_FILE.SIZE},
			    #{session.USER_UID},
			    CURRENT_TIMESTAMP()
			);
		</if>
	
		<!-- WT_NOTICE -->
		INSERT INTO WT_NOTICE
		(
			NOTICE_TIT,
			NOTICE_CONT,
			INS_ID,
			INS_DT,
			NOTICE_SETTING
			<if test="START_DATE != null and START_DATE != '' ">
			, START_DATE
			</if>
			<if test="END_DATE != null and END_DATE != '' ">
			, END_DATE
			</if>
			<if test="ATCH_FILE != null">
			, ATCH_FILE
			</if>
		) 
		VALUES
		(
			#{NOTICE_TIT},
			#{NOTICE_CONT},
			#{session.USER_UID},
			CURRENT_TIMESTAMP(),
			#{NOTICE_SETTING}
			<if test="START_DATE != null and START_DATE != ''">
			, #{START_DATE}
			</if>
			<if test="END_DATE != null and END_DATE != ''">
		    , #{END_DATE}
		    </if>
			<if test="ATCH_FILE != null">
			, #{ATCH_FILE.ATCH_FLE_SEQ}
			</if>
		);
		END;
	</insert>
	
	
	
	<!-- 수정 -->
	<update id="updateNotice" parameterType="map">
		BEGIN NOT ATOMIC
		<!-- 기존 첨부파일은 없고 새로운 첨부파일을 추가할 경우 -->
		<if test="ATCH_FILE != null and ATCH_FLE_SEQ == null">
			<!-- TCCO_FILE -->
			INSERT INTO TCCO_FILE
			(
			    FLE_KEY,
			    ATCH_FLE_SEQ,
			    FLE_TP,
			    FLE_PATH,
			    FLE_NM,
			    NEW_FLE_NM,
			    FLE_SZ,
			    INS_ID,
			    INS_DT
			)
			VALUES
			(
			    'notice_atch_file',
			    #{ATCH_FILE.ATCH_FLE_SEQ},
			    #{ATCH_FILE.EXTENSION},
			    #{ATCH_FILE.LAST_PATH},
			    #{ATCH_FILE.ORIGINAL_NAME},
			    #{ATCH_FILE.UNIQUE_NAME},
			    #{ATCH_FILE.SIZE},
			    #{session.USER_UID},
			    CURRENT_TIMESTAMP()
			);
		</if>
		
		UPDATE WT_NOTICE N, TCCO_FILE F
		   SET N.NOTICE_TIT = #{NOTICE_TIT}
		     , N.NOTICE_CONT = #{NOTICE_CONT}
		     <if test="NOTICE_SETTING != null and NOTICE_SETTING != ''">
		     , N.NOTICE_SETTING = #{NOTICE_SETTING}
		     </if>
		     <if test="START_DATE != null and START_DATE != ''">
		     , N.START_DATE = #{START_DATE}
		     </if>
		     <if test="END_DATE != null and END_DATE != ''">
		     , N.END_DATE = #{END_DATE}
		     </if>
		     , N.INS_ID = #{session.USER_UID}
		     
		     <!-- 새로운 첨부파일 추가 할 경우 -->
		     <if test="ATCH_FILE != null">
		     , N.ATCH_FILE = #{ATCH_FILE.ATCH_FLE_SEQ}
		     </if>
		     
		     <!-- 기존 첨부파일이 존재하며 새로운 첨부파일 추가 시-->
		     <if test="ATCH_FILE != null and ATCH_FLE_SEQ != null">
		     , F.ATCH_FLE_SEQ = #{ATCH_FILE.ATCH_FLE_SEQ}
		     , F.FLE_TP = #{ATCH_FILE.EXTENSION}
   		     , F.FLE_NM = #{ATCH_FILE.ORIGINAL_NAME}
   		     , F.FLE_SZ = #{ATCH_FILE.SIZE}
   		     , F.FLE_PATH = #{ATCH_FILE.LAST_PATH}
   		     , F.NEW_FLE_NM = #{ATCH_FILE.UNIQUE_NAME}
   		     , F.INS_ID = #{session.USER_UID}
	     	 , F.INS_DT = CURRENT_TIMESTAMP()
		     </if>
		WHERE N.NOTICE_ID = #{NOTICE_ID}
	 	<if test="ATCH_FILE != null and ATCH_FLE_SEQ != null">
		   AND N.ATCH_FILE = F.ATCH_FLE_SEQ
		</if>;
		 
		 END;
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteNotice" parameterType="map">
	<!-- ############ 첨부파일 아직 ############ -->
		BEGIN NOT ATOMIC
		
		<!-- WT_NOTICE -->
		DELETE
		FROM WT_NOTICE
		WHERE NOTICE_ID = #{NOTICE_ID};
		
		<!-- TCCO_FILE -->
		DELETE
		FROM TCCO_FILE
		WHERE ATCH_FLE_SEQ = #{ATCH_FLE_SEQ};
		
		END;
	</delete>
	
	<!-- 공지사항 상세 -->
	<select id="getNoticeInfo" parameterType="map" resultType="HashMap">
		SELECT N.NOTICE_ID
		     , N.NOTICE_TIT AS TITLE
		     , N.NOTICE_CONT AS CONTENT
		     , N.NOTICE_SETTING
         	 , SUBSTR(N.START_DATE, 1, 10) AS START_DATE
         	 , SUBSTR(N.END_DATE, 1, 10) AS END_DATE
		     , SUBSTR(N.INS_DT, 1, 10) AS INS_DT
		     , TU.USER_NM AS REGISTER
			 , TU.USER_UID
			 , IFNULL(TF.ATCH_FLE_SEQ, '') AS ATCH_FLE_SEQ
		     , IFNULL(TF.FLE_PATH, '') AS FLE_PATH
		     , IFNULL(TF.FLE_NM, '') AS FLE_NM
		     , IFNULL(TF.NEW_FLE_NM, '') AS NEW_FLE_NM
		     , IFNULL(TF.FLE_KEY, '') AS FLE_KEY
		  FROM WT_NOTICE N
		  LEFT JOIN TCCO_FILE TF 
					   ON TF.ATCH_FLE_SEQ = N.ATCH_FILE COLLATE utf8mb4_general_ci
		  LEFT JOIN 
		          ( SELECT TU.USER_UID, TUI.USER_NM
		              FROM TSST_USER TU
		         LEFT JOIN TSST_USER_INFO TUI
		                ON TU.USER_ID = TUI.USER_ID
		          )TU
		        ON TU.USER_UID = N.INS_ID
		  WHERE N.NOTICE_ID = #{NOTICE_ID}
	</select>
</mapper>