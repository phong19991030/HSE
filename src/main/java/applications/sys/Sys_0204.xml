<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 권한-프로그램 관리 -->
<mapper namespace="sys.sys0204">

	<!-- TSST_ROLE_MGT -->
	<!-- 020401, 020403, 020404 SELECT -->
	<!-- 권한 목록 불러오기-->
	<select id="getRoleMgt" parameterType="map" resultType="HashMap">
		SELECT
		ROLE_ID,
		ROLE_NM,
		USE_YN,
		RMK,
		DATE_TO_STRING(CONVERT_TZ(INS_DT, @@session.time_zone, #{CLIENT_TIME_ZONE}), #{LANG_CODE}, 'T%T') INS_DT,
		UPT_DT dt
		FROM TSST_ROLE_MGT
	
		<where>
			USE_YN = "Y"
			<if test="ROLE_NM != null and ROLE_NM != '' ">
				<trim prefix="AND">
					ROLE_NM like CONCAT('%', #{ROLE_NM}, '%')
				</trim>
	
			</if>
			<if test="ROLE_ID != null and ROLE_ID != '' ">
				<trim prefix="AND">
					ROLE_ID = #{ROLE_ID}
				</trim>
	
			</if>
			<if test="all != null and all != '' ">
				<trim prefix="AND">
					(ROLE_ID like CONCAT('%', #{all}, '%') OR ROLE_NM like CONCAT('%', #{all},'%'))
				</trim>
	
			</if>
	
		</where>
		ORDER BY dt DESC
	</select>
	
	
	<select id="getRoleMgtByUser" parameterType="map" resultType="HashMap">
		<if test="USER_UID != null and USER_UID != '' ">
			SELECT
			ROLE.ROLE_ID,
			ROLE_NM,
			USE_YN,
			RMK,
			DATE_TO_STRING(CONVERT_TZ(INS_DT, @@session.time_zone, #{CLIENT_TIME_ZONE}), #{LANG_CODE}, 'T%T') INS_DT,
			UPT_DT dt,
			IF(USER_ID is null, 'N', 'Y' ) SELECTED
			FROM TSST_ROLE_MGT ROLE
			LEFT JOIN TSST_USER_ROLE UR ON ROLE.ROLE_ID = UR.ROLE_ID  AND USER_ID = #{USER_UID}
		
			<where>
				USE_YN = "Y"
				<if test="ROLE_NM != null and ROLE_NM != '' ">
					<trim prefix="AND">
						ROLE_NM like CONCAT('%', #{ROLE_NM}, '%')
					</trim>
		
				</if>
				<if test="ROLE_ID != null and ROLE_ID != '' ">
					<trim prefix="AND">
						ROLE.ROLE_ID = #{ROLE_ID}
					</trim>
				</if>
				<if test="all != null and all != '' ">
					<trim prefix="AND">
						(ROLE.ROLE_ID like CONCAT('%', #{all}, '%') OR ROLE_NM like CONCAT('%', #{all},'%'))
					</trim>
		
				</if>
		
			</where>
			ORDER BY dt DESC
		</if>
		<if test="USER_UID == null or USER_UID == '' ">
			SELECT
			ROLE_ID,
			ROLE_NM,
			USE_YN,
			RMK,
			DATE_TO_STRING(CONVERT_TZ(INS_DT, @@session.time_zone, #{CLIENT_TIME_ZONE}), #{LANG_CODE}, 'T%T') INS_DT,
			UPT_DT dt,
			'N' SELECTED
			FROM TSST_ROLE_MGT
		
			<where>
				USE_YN = "Y"
				<if test="ROLE_NM != null and ROLE_NM != '' ">
					<trim prefix="AND">
						ROLE_NM like CONCAT('%', #{ROLE_NM}, '%')
					</trim>
		
				</if>
				<if test="ROLE_ID != null and ROLE_ID != '' ">
					<trim prefix="AND">
						ROLE_ID like CONCAT('%', #{ROLE_ID}, '%')
					</trim>
				</if>
				<if test="all != null and all != '' ">
					<trim prefix="AND">
						(ROLE_ID like CONCAT('%', #{all}, '%') OR ROLE_NM like CONCAT('%', #{all},'%'))
					</trim>
		
				</if>
		
			</where>
			ORDER BY dt DESC
		</if>
			
	</select>

	<select id="checkInuse"  parameterType="map" resultType="HashMap" >
		SELECT
			*
		FROM TSST_USER_ROLE
		WHERE ROLE_ID = #{ROLE_ID}

	</select>

	<select id="getRolePmg"  parameterType="map" resultType="HashMap" >
		SELECT
			ROLE_ID
		FROM	TSST_ROLE_PGM

	</select>
	<select id="getIdRoleMgt"  parameterType="map" resultType="HashMap" >
		SELECT
			ROLE_ID
		FROM	TSST_ROLE_MGT

	</select>
	<select id="updateUserYn"  parameterType="map" resultType="HashMap" >
		UPDATE TSST_ROLE_MGT SET
			USE_YN = "N"
		 WHERE	ROLE_ID	=	#{ROLE_ID}
	</select>
	<insert id="insertRolePGM">
		 call SP_TSST_USER_ROLE_REG();
	</insert>
	<select id="chkUserId" parameterType="map" resultType="string">
		SELECT	TRIM (CONVERT(COUNT(*),CHAR)) AS CNT
		  FROM	TSST_ROLE_MGT
		 WHERE	ROLE_ID	=	#{ROLE_ID}
	</select>
	<!-- 권한 로그 삽입 -->
	<insert id="insertRolePGMLog" parameterType="map">
		INSERT INTO TSLG_ROLE_MGT (
		    ROLE_ID,
		    ROLE_NM,
		    RMK,
		    UPT_ID,
		    UPT_DT,
		    LOG_TYPE
		) VALUES (
		    #{ROLE_ID},
		    #{ROLE_NM},
		    #{RMK},
		    #{SESS_USER_ID},
		    NOW(),
		    #{CRUD}
		)
	</insert>
	
	<!-- 020402, 020403 INSERT -->
	<!-- 새 권한 삽입 -->
	<insert id="insertRoleRM" parameterType="map">
		INSERT INTO TSST_ROLE_MGT(
			ROLE_ID,
			ROLE_NM,
			RMK,
			INS_ID,
			INS_DT
		) VALUES (
			#{ROLE_ID},
			#{ROLE_NM},
			#{RMK},
			#{SESS_USER_ID},
			NOW()
		)
	</insert>
	
	<!-- 020402, 020403 UPDATE -->
	<!-- 권한 갱신 -->
	<update id="updateRoleRM" parameterType="map">
		UPDATE TSST_ROLE_MGT
		SET
			ROLE_NM = #{ROLE_NM},
			RMK = #{RMK},
			UPT_ID = #{SESS_USER_ID},
			UPT_DT = SYSDATE()
		WHERE ROLE_ID	=	#{ROLEID}
	</update>

	<!-- 020402, 020403 DELETE1 -->	
	<!-- 권한 삭제 -->
	<delete id="deleteRoleRM" parameterType="map">
		DELETE
		FROM TSST_ROLE_MGT
		WHERE ROLE_ID	=	#{ROLE_ID}
	</delete>

	<!-- 020402, 020403 DELETE2 -->
	<!-- 사용자-권한 관계 삭제 -->
	<delete id="deleteRoleUR" parameterType="map">
		DELETE
		FROM TSST_USER_ROLE
		WHERE ROLE_ID = #{ROLE_ID}
	</delete>
	<delete id="deleteRolePGM" parameterType="map">
		DELETE
		FROM TSST_ROLE_PGM
		WHERE ROLE_ID = #{ROLE_ID}
	</delete>
	
	
	
	
		<!-- 
		ID	: getMenuId
		설명	: 메뉴ID설정
		parameterClass	: map
		resultClass	: string
		-->
	<select id="getPgmId" parameterType="map" resultType="HashMap">
		SELECT	
			CONCAT(#{PGM_ID} , '_' , LPAD(TRIM(CONVERT(IFNULL(MAX(CONVERT(SUBSTRING(MENU_ID, LENGTH (#{PGM_ID}) + 2, LENGTH(PGM_ID) ), INT)  ) + 1, '01'), CHAR)), 2, '0')) AS PGM_ID
		FROM	TSST_MENU_MGT
		WHERE	UP_PGM_ID	=	#{PGM_ID}
	</select>	
	
	
	
	
		<!-- 020404 SELECT -->
	<!-- 권한별 프로그램 권한 불러오기 -->
	<select id="getPgmForRole" parameterType="map" resultType="HashMap">
		SELECT
			<choose>
         		<when test="LANG_CODE != null and LANG_CODE.equals('en')">
           			P.MENU_NM_ENG AS  PGM_NM, 		
         		</when>
        		<otherwise>
        		P.MENU_NM AS  PGM_NM, 		
         		</otherwise>  
	        </choose>
			<!-- CASE  P.MNG_YN WHEN 'N' THEN 'D' 
			ELSE R.MNG_YN END MNG_YN,
			CASE  P.READ_YN WHEN 'N' THEN 'D' 
			ELSE R.READ_YN END READ_YN,
			CASE  P.WRT_YN WHEN 'N' THEN 'D' 
			ELSE R.WRT_YN END WRT_YN,			
			CASE  P.EXC_DN_YN WHEN 'N' THEN 'D' 
			ELSE R.EXC_DN_YN END EXC_DN_YN,
			CASE  P.MOD_YN WHEN 'N' THEN 'D' 
			ELSE R.MOD_YN END MOD_YN,
			CASE  P.DEL_YN WHEN 'N' THEN 'D' 
			ELSE R.DEL_YN END DEL_YN,			
			CASE  P.PNT_YN WHEN 'N' THEN 'D' 
			ELSE R.PNT_YN END PNT_YN,
			CASE  P.MNG_YN WHEN 'N' THEN 'D' 
			ELSE P.MNG_YN END P_MNG_YN,
			CASE  P.READ_YN WHEN 'N' THEN 'D' 
			ELSE P.READ_YN END P_READ_YN,			
			CASE  P.WRT_YN WHEN 'N' THEN 'D' 
			ELSE P.WRT_YN END P_WRT_YN,
			CASE  P.EXC_DN_YN WHEN 'N' THEN 'D' 
			ELSE P.EXC_DN_YN END P_EXC_DN_YN,
			CASE  P.MOD_YN WHEN 'N' THEN 'D' 
			ELSE P.MOD_YN END P_MOD_YN,			
			CASE  P.DEL_YN WHEN 'N' THEN 'D' 
			ELSE P.DEL_YN END P_DEL_YN,
			CASE  P.PNT_YN WHEN 'N' THEN 'D' 
			ELSE P.PNT_YN END P_PNT_YN, -->
			R.MNG_YN MNG_YN,
			R.READ_YN READ_YN,
			R.WRT_YN WRT_YN,			
			R.EXC_DN_YN EXC_DN_YN,
			R.MOD_YN MOD_YN,
			R.DEL_YN DEL_YN,			
			R.PNT_YN PNT_YN,
			R.MNG_YN P_MNG_YN,
			R.READ_YN P_READ_YN,			
			R.WRT_YN P_WRT_YN,
			R.EXC_DN_YN P_EXC_DN_YN,
			R.MOD_YN P_MOD_YN,			
			R.DEL_YN P_DEL_YN,
			R.PNT_YN P_PNT_YN,
			CONVERT(LEV, CHAR)  LEV,
			P.MENU_ID,
			P.UP_MENU_ID ,
			P.ORD_NO,
			P.LINK_PATH,
			IFNULL(R.ROLE_ID,#{ROLE_ID}) AS ROLE_ID
<!-- 		FROM -->
<!-- 			TSST_PGM_MGT P, -->
<!-- 			( -->
<!-- 				SELECT * FROM TSST_ROLE_PGM -->
<!-- 				WHERE ROLE_ID = #{ROLE_ID} -->
<!-- 			) R -->
<!-- 		WHERE P.PGM_ID = R.PGM_ID(+) -->
		<!-- FROM    TSST_PGM_MGT P LEFT JOIN   (SELECT * FROM TSST_ROLE_PGM     WHERE ROLE_ID = #{ROLE_ID}) R  ON P.PGM_ID = R.PGM_ID -->
		FROM    TSST_MENU_MGT P LEFT JOIN   (SELECT * FROM TSST_ROLE_PGM     WHERE ROLE_ID = #{ROLE_ID}) R  ON P.MENU_ID = R.MENU_ID		
<!-- 		<where>
					<if test="SE_PGM_NM != null and SE_PGM_NM != '' "> 
						<trim prefix="AND">
						P.MENU_NM like CONCAT('%', #{SE_PGM_NM}, '%')
						</trim>
						<trim prefix="AND">
						P.MENU_NM_ENG like CONCAT('%', #{SE_PGM_NM}, '%')
						</trim>

		</if>
		</where> -->
		WHERE LEV > 1
		ORDER BY LEV,P.UP_MENU_ID,P.ORD_NO,P.MENU_ID
		</select>
	
	<!-- 020404 SAVE -->
	<!-- 권한별 프로그램 수정사항 저장 -->
	<update id="savePgmForRole" parameterType="map">
			BEGIN NOT ATOMIC
			DECLARE V1 INT;
			SELECT COUNT(*)  INTO V1 FROM TSST_ROLE_PGM WHERE ROLE_ID = #{ROLE_ID} AND MENU_ID = #{MENU_ID};
			IF (V1 > 0) THEN
                  UPDATE TSST_ROLE_PGM
					SET
						MNG_YN =  IF(STRCMP(#{MNG_YN},'D') = 0, MNG_YN, #{MNG_YN}),
						READ_YN =  IF(STRCMP(#{READ_YN},'D') = 0, READ_YN, #{READ_YN}),
						WRT_YN =  IF(STRCMP(#{WRT_YN},'D') = 0, WRT_YN, #{WRT_YN}),
						EXC_DN_YN =  IF(STRCMP(#{EXC_DN_YN},'D') = 0, EXC_DN_YN, #{EXC_DN_YN}),
						MOD_YN =  IF(STRCMP(#{MOD_YN},'D') = 0, MOD_YN, #{MOD_YN}),
						DEL_YN =  IF(STRCMP(#{DEL_YN},'D') = 0, MNG_YN, #{DEL_YN}),
						PNT_YN =  IF(STRCMP(#{PNT_YN},'D') = 0, PNT_YN, #{PNT_YN}) 
						WHERE ROLE_ID = #{ROLE_ID} AND MENU_ID = #{MENU_ID};
						  
            ELSE 
                INSERT INTO TSST_ROLE_PGM(
				   MENU_ID, ROLE_ID, 
				   MNG_YN, 
				   READ_YN, 
				   WRT_YN, 
				   EXC_DN_YN, 
				   MOD_YN, 
				   DEL_YN, 
				   PNT_YN
				   
			    )
			    VALUES (
					#{MENU_ID},
					#{ROLE_ID},
					#{MNG_YN},
					#{READ_YN},
					#{WRT_YN},					
					#{EXC_DN_YN},
					#{MOD_YN},
					#{DEL_YN}, 
					#{PNT_YN}
				);
				END IF;		
		END;
			
	</update>
	
</mapper>